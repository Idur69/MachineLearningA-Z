q()
q()
install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
# Data preprocessing
# Importing the dataset
dataset = read.csv('Data.csv')
# Take care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
# Encoding categorical data
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1))
# Splitting the data into the Training set and testset
#install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
set.seed(123)
#
set.seed(123)
#
# Data preprocessing
# Importing the dataset
dataset = read.csv('Data.csv')
# Take care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
# Encoding categorical data
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1))
# Splitting the data into the Training set and testset
#install.packages('caTools')
library(caTools)
#set.seed(123)
#split = sample.split(dataset$Purchased, SplitRatio = 0.8)
# Data preprocessing
# Importing the dataset
dataset = read.csv('Data.csv')
# Take care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
# Encoding categorical data
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1))
# Splitting the data into the Training set and testset
#install.packages('caTools')
library(caTools)
#set.seed(123)
#split = sample.split(dataset$Purchased, SplitRatio = 0.8)
# Data preprocessing
# Importing the dataset
dataset = read.csv('Data.csv')
# Take care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
# Encoding categorical data
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1))
# Splitting the data into the Training set and testset
#install.packages('caTools')
library(caTools)
#set.seed(123)
#split = sample.split(dataset$Purchased, SplitRatio = 0.8)
# Data preprocessing
# Importing the dataset
dataset = read.csv('Data.csv')
# Take care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
# Encoding categorical data
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1))
# Splitting the data into the Training set and testset
#install.packages('caTools')
library(caTools)
#set.seed(123)
#split = sample.split(dataset$Purchased, SplitRatio = 0.8)
# Importing the dataset
dataset = read.csv('Data.csv')
setwd("C:/Users/Idur/Desktop/ML_A_to_Z/MachLearn_A-Z")
# Encoding categorical data
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
# Importing the dataset
dataset = read.csv('Data.csv')
# Take care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
View(dataset)
View(dataset)
# Encoding categorical data
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1))
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
split
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.7)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.7)
split
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(training_set)
View(training_set)
View(test_set)
View(training_set)
View(training_set)
View(test_set)
View(test_set)
training_set = scale(training_set)
test_Set = scale(test_Set)
training_set[, 2:3] = scale(training_set[, 2:3])
test_Set[, 2:3] = scale(test_Set[, 2:3])
training_set[, 2:3] = scale(training_set[, 2:3])
test_Set[, 2:3] = scale(test_Set[, 2:3])
training_set[, 2:3] = scale(training_set[, 2:3])
test_Set[, 2:3] = scale(test_Set[, 2:3])
training_set[, 2:3] = scale(training_set[, 2:3])
test_Set[, 2:3] = scale(test_Set[, 2:3])
test_set[, 2:3] = scale(test_set[, 2:3])
